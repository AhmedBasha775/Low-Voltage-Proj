
transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001033  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a91  00000000  00000000  00001653  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb8  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00002c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bd  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000383  00000000  00000000  00003665  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  74:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <system_init>:
	.measurement_start_time = 0
};

void system_init(void) {

	g_ultrasonic_status.echo_duration = 0;
  7c:	e0 e6       	ldi	r30, 0x60	; 96
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	11 82       	std	Z+1, r1	; 0x01
  82:	10 82       	st	Z, r1
	g_ultrasonic_status.measurement_complete = false;
  84:	12 82       	std	Z+2, r1	; 0x02
	g_ultrasonic_status.echo_received = false;
  86:	13 82       	std	Z+3, r1	; 0x03
	g_ultrasonic_status.measurement_start_time = 0;
  88:	14 82       	std	Z+4, r1	; 0x04
  8a:	15 82       	std	Z+5, r1	; 0x05
  8c:	16 82       	std	Z+6, r1	; 0x06
  8e:	17 82       	std	Z+7, r1	; 0x07
  90:	08 95       	ret

00000092 <distance_calculator_raw_to_cm>:
	//
	// With timer prescaler 8 at 8MHz: 1 tick = 1µs
	// Sound speed = 343 m/s = 0.0343 cm/µs
	// Distance in cm = (raw_duration * 0.0343) / 2
	
	uint32_t distance_cm = ((uint32_t)raw_duration * 343UL) / 20000UL;
  92:	9c 01       	movw	r18, r24
  94:	a7 e5       	ldi	r26, 0x57	; 87
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	0e 94 c2 01 	call	0x384	; 0x384 <__umulhisi3>
  9c:	20 e2       	ldi	r18, 0x20	; 32
  9e:	3e e4       	ldi	r19, 0x4E	; 78
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	0e 94 a0 01 	call	0x340	; 0x340 <__udivmodsi4>
	
	if (distance_cm < MIN_DISTANCE_CM) {
  a8:	22 30       	cpi	r18, 0x02	; 2
  aa:	31 05       	cpc	r19, r1
  ac:	41 05       	cpc	r20, r1
  ae:	51 05       	cpc	r21, r1
  b0:	68 f0       	brcs	.+26     	; 0xcc <distance_calculator_raw_to_cm+0x3a>
  b2:	da 01       	movw	r26, r20
  b4:	c9 01       	movw	r24, r18
  b6:	81 39       	cpi	r24, 0x91	; 145
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	92 07       	cpc	r25, r18
  bc:	a1 05       	cpc	r26, r1
  be:	b1 05       	cpc	r27, r1
  c0:	48 f0       	brcs	.+18     	; 0xd4 <distance_calculator_raw_to_cm+0x42>
  c2:	80 e9       	ldi	r24, 0x90	; 144
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	08 95       	ret
		distance_cm = MIN_DISTANCE_CM;
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b0 e0       	ldi	r27, 0x00	; 0
		} else if (distance_cm > MAX_DISTANCE_CM) {
		distance_cm = MAX_DISTANCE_CM;
	}
	
	return (uint8_t)distance_cm;
}
  d4:	08 95       	ret

000000d6 <distance_calculator_get_distance>:
#include "distance_calculator.h"


uint8_t distance_calculator_get_distance(void) {
	if (ultrasonic_is_measurement_complete()) {
  d6:	0e 94 3e 01 	call	0x27c	; 0x27c <ultrasonic_is_measurement_complete>
  da:	88 23       	and	r24, r24
  dc:	29 f0       	breq	.+10     	; 0xe8 <distance_calculator_get_distance+0x12>
		uint16_t raw_duration = ultrasonic_get_raw_duration();
  de:	0e 94 39 01 	call	0x272	; 0x272 <ultrasonic_get_raw_duration>
		return distance_calculator_raw_to_cm(raw_duration);
  e2:	0e 94 49 00 	call	0x92	; 0x92 <distance_calculator_raw_to_cm>
  e6:	08 95       	ret
		} else {
		return DISTANCE_ERROR_VALUE;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
  ea:	08 95       	ret

000000ec <trigger_pin_high>:
	ECHO_DDR &= ~(1 << ECHO_PIN);
	ECHO_PORT |= (1 << ECHO_PIN);  
}

void trigger_pin_high(void) {
	TRIG_PORT |= (1 << TRIG_PIN);
  ec:	a8 9a       	sbi	0x15, 0	; 21
  ee:	08 95       	ret

000000f0 <trigger_pin_low>:
}

void trigger_pin_low(void) {
	TRIG_PORT &= ~(1 << TRIG_PIN);
  f0:	a8 98       	cbi	0x15, 0	; 21
  f2:	08 95       	ret

000000f4 <gpio_init>:
#include "gpio.h"

void gpio_init(void) {

	TRIG_DDR |= (1 << TRIG_PIN);
  f4:	a0 9a       	sbi	0x14, 0	; 20
	trigger_pin_low();  
  f6:	0e 94 78 00 	call	0xf0	; 0xf0 <trigger_pin_low>
	

	ECHO_DDR &= ~(1 << ECHO_PIN);
  fa:	8a 98       	cbi	0x11, 2	; 17
	ECHO_PORT |= (1 << ECHO_PIN);  
  fc:	92 9a       	sbi	0x12, 2	; 18
  fe:	08 95       	ret

00000100 <trigger_pulse>:
void trigger_pin_low(void) {
	TRIG_PORT &= ~(1 << TRIG_PIN);
}

void trigger_pulse(void) {
	trigger_pin_high();
 100:	0e 94 76 00 	call	0xec	; 0xec <trigger_pin_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <trigger_pulse+0x6>
 10a:	00 00       	nop
	_delay_us(TRIGGER_PULSE_WIDTH_US);
	trigger_pin_low();
 10c:	0e 94 78 00 	call	0xf0	; 0xf0 <trigger_pin_low>
 110:	08 95       	ret

00000112 <read_echo_pin>:
}

bool read_echo_pin(void) {
	return (ECHO_PIN_INPUT & (1 << ECHO_PIN)) != 0;
 112:	80 b3       	in	r24, 0x10	; 16
 114:	82 fb       	bst	r24, 2
 116:	88 27       	eor	r24, r24
 118:	80 f9       	bld	r24, 0
 11a:	08 95       	ret

0000011c <main>:
#include "timer.h"
#include "ultrasonic.h"
#include "distance_calculator.h"

int main(void) {
	system_init();
 11c:	0e 94 3e 00 	call	0x7c	; 0x7c <system_init>
	uart_init();
 120:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <uart_init>
	gpio_init();
 124:	0e 94 7a 00 	call	0xf4	; 0xf4 <gpio_init>
	timer_init();
 128:	0e 94 af 00 	call	0x15e	; 0x15e <timer_init>
	ultrasonic_init();
 12c:	0e 94 48 01 	call	0x290	; 0x290 <ultrasonic_init>
	
	// Enable global interrupts
	sei();
 130:	78 94       	sei
		if (ultrasonic_wait_for_measurement(MEASUREMENT_TIMEOUT_MS)) {
			// Calculate distance from measurement
			measured_distance = distance_calculator_get_distance();
			} else {

			measured_distance = DISTANCE_ERROR_VALUE;
 132:	cf ef       	ldi	r28, 0xFF	; 255
	
	uint8_t measured_distance;
	
	while (1) {
		// Trigger ultrasonic measurement
		ultrasonic_trigger_measurement();
 134:	0e 94 54 01 	call	0x2a8	; 0x2a8 <ultrasonic_trigger_measurement>
		
		// Wait for measurement completion or timeout
		if (ultrasonic_wait_for_measurement(MEASUREMENT_TIMEOUT_MS)) {
 138:	8e e1       	ldi	r24, 0x1E	; 30
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ultrasonic_wait_for_measurement>
 140:	88 23       	and	r24, r24
 142:	19 f0       	breq	.+6      	; 0x14a <main+0x2e>
			// Calculate distance from measurement
			measured_distance = distance_calculator_get_distance();
 144:	0e 94 6b 00 	call	0xd6	; 0xd6 <distance_calculator_get_distance>
 148:	01 c0       	rjmp	.+2      	; 0x14c <main+0x30>
			} else {

			measured_distance = DISTANCE_ERROR_VALUE;
 14a:	8c 2f       	mov	r24, r28
		}
		
		// Transmit distance via UART
		uart_transmit(measured_distance);
 14c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	87 ea       	ldi	r24, 0xA7	; 167
 152:	91 e6       	ldi	r25, 0x61	; 97
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x38>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x3e>
 15a:	00 00       	nop
 15c:	eb cf       	rjmp	.-42     	; 0x134 <main+0x18>

0000015e <timer_init>:
uint16_t timer_get_count(void) {
	return TCNT1;
}

void timer_reset_count(void) {
	TCNT1 = 0;
 15e:	1f bc       	out	0x2f, r1	; 47
 160:	1e bc       	out	0x2e, r1	; 46
 162:	1d bc       	out	0x2d, r1	; 45
 164:	1c bc       	out	0x2c, r1	; 44
 166:	8d e0       	ldi	r24, 0x0D	; 13
 168:	83 bf       	out	0x33, r24	; 51
 16a:	87 e0       	ldi	r24, 0x07	; 7
 16c:	8c bf       	out	0x3c, r24	; 60
 16e:	89 b7       	in	r24, 0x39	; 57
 170:	82 60       	ori	r24, 0x02	; 2
 172:	89 bf       	out	0x39, r24	; 57
 174:	08 95       	ret

00000176 <timer_start_measurement>:
 176:	1d bc       	out	0x2d, r1	; 45
 178:	1c bc       	out	0x2c, r1	; 44
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	8e bd       	out	0x2e, r24	; 46
 17e:	08 95       	ret

00000180 <timer_stop_measurement>:
 180:	1e bc       	out	0x2e, r1	; 46
 182:	08 95       	ret

00000184 <timer_get_count>:
 184:	8c b5       	in	r24, 0x2c	; 44
 186:	9d b5       	in	r25, 0x2d	; 45
 188:	08 95       	ret

0000018a <timer_get_milliseconds>:
}

uint32_t timer_get_milliseconds(void) {
	return millisecond_counter;
 18a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <millisecond_counter>
 18e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <millisecond_counter+0x1>
 192:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <millisecond_counter+0x2>
 196:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <millisecond_counter+0x3>
}
 19a:	08 95       	ret

0000019c <__vector_10>:


ISR(TIMER0_COMP_vect) {
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
	millisecond_counter++;
 1ae:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <millisecond_counter>
 1b2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <millisecond_counter+0x1>
 1b6:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <millisecond_counter+0x2>
 1ba:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <millisecond_counter+0x3>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	a1 1d       	adc	r26, r1
 1c2:	b1 1d       	adc	r27, r1
 1c4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <millisecond_counter>
 1c8:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <millisecond_counter+0x1>
 1cc:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <millisecond_counter+0x2>
 1d0:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <millisecond_counter+0x3>
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <uart_init>:
#include "uart.h"

void uart_init(void) {
	UBRRH = (uint8_t)(UBRR_VALUE >> 8);
 1e6:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t)UBRR_VALUE;
 1e8:	83 e3       	ldi	r24, 0x33	; 51
 1ea:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = (1 << TXEN);
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 1f0:	86 e8       	ldi	r24, 0x86	; 134
 1f2:	80 bd       	out	0x20, r24	; 32
 1f4:	08 95       	ret

000001f6 <uart_transmit>:
}

void uart_transmit(uint8_t data) {

	while (!(UCSRA & (1 << UDRE)));
 1f6:	5d 9b       	sbis	0x0b, 5	; 11
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <uart_transmit>
	UDR = data;
 1fa:	8c b9       	out	0x0c, r24	; 12
 1fc:	08 95       	ret

000001fe <ultrasonic_wait_for_measurement>:
	

	g_ultrasonic_status.measurement_start_time = timer_get_milliseconds();
}

bool ultrasonic_wait_for_measurement(uint16_t timeout_ms) {
 1fe:	8f 92       	push	r8
 200:	9f 92       	push	r9
 202:	af 92       	push	r10
 204:	bf 92       	push	r11
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	6c 01       	movw	r12, r24
	uint32_t start_time = timer_get_milliseconds();
 216:	0e 94 c5 00 	call	0x18a	; 0x18a <timer_get_milliseconds>
 21a:	4b 01       	movw	r8, r22
 21c:	5c 01       	movw	r10, r24
	
	while (!g_ultrasonic_status.measurement_complete) {
 21e:	10 91 62 00 	lds	r17, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 222:	11 11       	cpse	r17, r1
 224:	19 c0       	rjmp	.+50     	; 0x258 <ultrasonic_wait_for_measurement+0x5a>

		if ((timer_get_milliseconds() - start_time) >= timeout_ms) {
 226:	e1 2c       	mov	r14, r1
 228:	f1 2c       	mov	r15, r1
}

bool ultrasonic_wait_for_measurement(uint16_t timeout_ms) {
	uint32_t start_time = timer_get_milliseconds();
	
	while (!g_ultrasonic_status.measurement_complete) {
 22a:	c0 e6       	ldi	r28, 0x60	; 96
 22c:	d0 e0       	ldi	r29, 0x00	; 0

		if ((timer_get_milliseconds() - start_time) >= timeout_ms) {
 22e:	0e 94 c5 00 	call	0x18a	; 0x18a <timer_get_milliseconds>
 232:	dc 01       	movw	r26, r24
 234:	cb 01       	movw	r24, r22
 236:	88 19       	sub	r24, r8
 238:	99 09       	sbc	r25, r9
 23a:	aa 09       	sbc	r26, r10
 23c:	bb 09       	sbc	r27, r11
 23e:	8c 15       	cp	r24, r12
 240:	9d 05       	cpc	r25, r13
 242:	ae 05       	cpc	r26, r14
 244:	bf 05       	cpc	r27, r15
 246:	40 f4       	brcc	.+16     	; 0x258 <ultrasonic_wait_for_measurement+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <ultrasonic_wait_for_measurement+0x4c>
 24e:	00 00       	nop
}

bool ultrasonic_wait_for_measurement(uint16_t timeout_ms) {
	uint32_t start_time = timer_get_milliseconds();
	
	while (!g_ultrasonic_status.measurement_complete) {
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	88 23       	and	r24, r24
 254:	61 f3       	breq	.-40     	; 0x22e <ultrasonic_wait_for_measurement+0x30>
		

		_delay_us(10);
	}
	
	return true;  
 256:	18 2f       	mov	r17, r24
}
 258:	81 2f       	mov	r24, r17
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	df 90       	pop	r13
 266:	cf 90       	pop	r12
 268:	bf 90       	pop	r11
 26a:	af 90       	pop	r10
 26c:	9f 90       	pop	r9
 26e:	8f 90       	pop	r8
 270:	08 95       	ret

00000272 <ultrasonic_get_raw_duration>:

uint16_t ultrasonic_get_raw_duration(void) {
	return g_ultrasonic_status.echo_duration;
 272:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 276:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
}
 27a:	08 95       	ret

0000027c <ultrasonic_is_measurement_complete>:

bool ultrasonic_is_measurement_complete(void) {
	return g_ultrasonic_status.measurement_complete;
 27c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
}
 280:	08 95       	ret

00000282 <ultrasonic_reset_measurement>:

void ultrasonic_reset_measurement(void) {
	g_ultrasonic_status.echo_duration = 0;
 282:	e0 e6       	ldi	r30, 0x60	; 96
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	11 82       	std	Z+1, r1	; 0x01
 288:	10 82       	st	Z, r1
	g_ultrasonic_status.measurement_complete = false;
 28a:	12 82       	std	Z+2, r1	; 0x02
	g_ultrasonic_status.echo_received = false;
 28c:	13 82       	std	Z+3, r1	; 0x03
 28e:	08 95       	ret

00000290 <ultrasonic_init>:
#include "ultrasonic.h"

void ultrasonic_init(void) {

	MCUCR |= (1 << ISC00);
 290:	85 b7       	in	r24, 0x35	; 53
 292:	81 60       	ori	r24, 0x01	; 1
 294:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC01);
 296:	85 b7       	in	r24, 0x35	; 53
 298:	8d 7f       	andi	r24, 0xFD	; 253
 29a:	85 bf       	out	0x35, r24	; 53

	GICR |= (1 << INT0);
 29c:	8b b7       	in	r24, 0x3b	; 59
 29e:	80 64       	ori	r24, 0x40	; 64
 2a0:	8b bf       	out	0x3b, r24	; 59
	

	ultrasonic_reset_measurement();
 2a2:	0e 94 41 01 	call	0x282	; 0x282 <ultrasonic_reset_measurement>
 2a6:	08 95       	ret

000002a8 <ultrasonic_trigger_measurement>:
}

void ultrasonic_trigger_measurement(void) {

	ultrasonic_reset_measurement();
 2a8:	0e 94 41 01 	call	0x282	; 0x282 <ultrasonic_reset_measurement>
	
	trigger_pulse();
 2ac:	0e 94 80 00 	call	0x100	; 0x100 <trigger_pulse>
	

	g_ultrasonic_status.measurement_start_time = timer_get_milliseconds();
 2b0:	0e 94 c5 00 	call	0x18a	; 0x18a <timer_get_milliseconds>
 2b4:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 2b8:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 2bc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 2c0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 2c4:	08 95       	ret

000002c6 <ultrasonic_echo_interrupt_handler>:
	g_ultrasonic_status.measurement_complete = false;
	g_ultrasonic_status.echo_received = false;
}

void ultrasonic_echo_interrupt_handler(void) {
	if (read_echo_pin()) {
 2c6:	0e 94 89 00 	call	0x112	; 0x112 <read_echo_pin>
 2ca:	88 23       	and	r24, r24
 2cc:	31 f0       	breq	.+12     	; 0x2da <ultrasonic_echo_interrupt_handler+0x14>

		timer_start_measurement();
 2ce:	0e 94 bb 00 	call	0x176	; 0x176 <timer_start_measurement>
		g_ultrasonic_status.echo_received = true;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2d8:	08 95       	ret
		} else {

		if (g_ultrasonic_status.echo_received) {
 2da:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2de:	88 23       	and	r24, r24
 2e0:	51 f0       	breq	.+20     	; 0x2f6 <ultrasonic_echo_interrupt_handler+0x30>
			timer_stop_measurement();
 2e2:	0e 94 c0 00 	call	0x180	; 0x180 <timer_stop_measurement>
			g_ultrasonic_status.echo_duration = timer_get_count();
 2e6:	0e 94 c2 00 	call	0x184	; 0x184 <timer_get_count>
 2ea:	e0 e6       	ldi	r30, 0x60	; 96
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	91 83       	std	Z+1, r25	; 0x01
 2f0:	80 83       	st	Z, r24
			g_ultrasonic_status.measurement_complete = true;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	82 83       	std	Z+2, r24	; 0x02
 2f6:	08 95       	ret

000002f8 <__vector_1>:
		}
	}
}


ISR(INT0_vect) {
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	4f 93       	push	r20
 308:	5f 93       	push	r21
 30a:	6f 93       	push	r22
 30c:	7f 93       	push	r23
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
	ultrasonic_echo_interrupt_handler();
 31a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <ultrasonic_echo_interrupt_handler>
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	7f 91       	pop	r23
 32c:	6f 91       	pop	r22
 32e:	5f 91       	pop	r21
 330:	4f 91       	pop	r20
 332:	3f 91       	pop	r19
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <__udivmodsi4>:
 340:	a1 e2       	ldi	r26, 0x21	; 33
 342:	1a 2e       	mov	r1, r26
 344:	aa 1b       	sub	r26, r26
 346:	bb 1b       	sub	r27, r27
 348:	fd 01       	movw	r30, r26
 34a:	0d c0       	rjmp	.+26     	; 0x366 <__udivmodsi4_ep>

0000034c <__udivmodsi4_loop>:
 34c:	aa 1f       	adc	r26, r26
 34e:	bb 1f       	adc	r27, r27
 350:	ee 1f       	adc	r30, r30
 352:	ff 1f       	adc	r31, r31
 354:	a2 17       	cp	r26, r18
 356:	b3 07       	cpc	r27, r19
 358:	e4 07       	cpc	r30, r20
 35a:	f5 07       	cpc	r31, r21
 35c:	20 f0       	brcs	.+8      	; 0x366 <__udivmodsi4_ep>
 35e:	a2 1b       	sub	r26, r18
 360:	b3 0b       	sbc	r27, r19
 362:	e4 0b       	sbc	r30, r20
 364:	f5 0b       	sbc	r31, r21

00000366 <__udivmodsi4_ep>:
 366:	66 1f       	adc	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	88 1f       	adc	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	1a 94       	dec	r1
 370:	69 f7       	brne	.-38     	; 0x34c <__udivmodsi4_loop>
 372:	60 95       	com	r22
 374:	70 95       	com	r23
 376:	80 95       	com	r24
 378:	90 95       	com	r25
 37a:	9b 01       	movw	r18, r22
 37c:	ac 01       	movw	r20, r24
 37e:	bd 01       	movw	r22, r26
 380:	cf 01       	movw	r24, r30
 382:	08 95       	ret

00000384 <__umulhisi3>:
 384:	a2 9f       	mul	r26, r18
 386:	b0 01       	movw	r22, r0
 388:	b3 9f       	mul	r27, r19
 38a:	c0 01       	movw	r24, r0
 38c:	a3 9f       	mul	r26, r19
 38e:	70 0d       	add	r23, r0
 390:	81 1d       	adc	r24, r1
 392:	11 24       	eor	r1, r1
 394:	91 1d       	adc	r25, r1
 396:	b2 9f       	mul	r27, r18
 398:	70 0d       	add	r23, r0
 39a:	81 1d       	adc	r24, r1
 39c:	11 24       	eor	r1, r1
 39e:	91 1d       	adc	r25, r1
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
