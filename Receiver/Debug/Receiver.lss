
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000035c  000003f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006a  0080006a  000003fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9a  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093f  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a5  00000000  00000000  00001db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00002758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000623  00000000  00000000  00002a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027e  00000000  00000000  00003077  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000032f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  8a:	0c 94 ac 01 	jmp	0x358	; 0x358 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <collision_control_init>:
#include "collision_control.h"

void collision_control_init(void) {
	g_system_status.led_counter = 0;
  92:	e0 e6       	ldi	r30, 0x60	; 96
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	14 82       	std	Z+4, r1	; 0x04
  98:	13 82       	std	Z+3, r1	; 0x03
	g_system_status.buzzer_counter = 0;
  9a:	16 82       	std	Z+6, r1	; 0x06
  9c:	15 82       	std	Z+5, r1	; 0x05
	g_system_status.buzzer_period = 0;
  9e:	10 86       	std	Z+8, r1	; 0x08
  a0:	17 82       	std	Z+7, r1	; 0x07
  a2:	08 95       	ret

000000a4 <collision_control_handle_safe_distance>:
	collision_control_update_buzzer();
}

void collision_control_handle_safe_distance(void) {
	// Turn off all warning indicators
	all_outputs_off();
  a4:	0e 94 0b 01 	call	0x216	; 0x216 <all_outputs_off>
	
	g_system_status.led_counter = 0;
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	14 82       	std	Z+4, r1	; 0x04
  ae:	13 82       	std	Z+3, r1	; 0x03
	g_system_status.buzzer_counter = 0;
  b0:	16 82       	std	Z+6, r1	; 0x06
  b2:	15 82       	std	Z+5, r1	; 0x05
  b4:	08 95       	ret

000000b6 <collision_control_update_led>:
}

void collision_control_update_led(void) {
  b6:	cf 92       	push	r12
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
	static uint32_t last_led_toggle_time = 0;
	uint32_t current_time = timer_get_milliseconds();
  be:	0e 94 3b 01 	call	0x276	; 0x276 <timer_get_milliseconds>
  c2:	6b 01       	movw	r12, r22
  c4:	7c 01       	movw	r14, r24
	
	if (current_time - last_led_toggle_time >= LED_TOGGLE_PERIOD_MS) {
  c6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <last_led_toggle_time.1791>
  ca:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <last_led_toggle_time.1791+0x1>
  ce:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <last_led_toggle_time.1791+0x2>
  d2:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <last_led_toggle_time.1791+0x3>
  d6:	a7 01       	movw	r20, r14
  d8:	96 01       	movw	r18, r12
  da:	28 1b       	sub	r18, r24
  dc:	39 0b       	sbc	r19, r25
  de:	4a 0b       	sbc	r20, r26
  e0:	5b 0b       	sbc	r21, r27
  e2:	da 01       	movw	r26, r20
  e4:	c9 01       	movw	r24, r18
  e6:	84 3f       	cpi	r24, 0xF4	; 244
  e8:	91 40       	sbci	r25, 0x01	; 1
  ea:	a1 05       	cpc	r26, r1
  ec:	b1 05       	cpc	r27, r1
  ee:	50 f0       	brcs	.+20     	; 0x104 <collision_control_update_led+0x4e>
		led_toggle();
  f0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <led_toggle>
		last_led_toggle_time = current_time;
  f4:	c0 92 6e 00 	sts	0x006E, r12	; 0x80006e <last_led_toggle_time.1791>
  f8:	d0 92 6f 00 	sts	0x006F, r13	; 0x80006f <last_led_toggle_time.1791+0x1>
  fc:	e0 92 70 00 	sts	0x0070, r14	; 0x800070 <last_led_toggle_time.1791+0x2>
 100:	f0 92 71 00 	sts	0x0071, r15	; 0x800071 <last_led_toggle_time.1791+0x3>
	}
}
 104:	ff 90       	pop	r15
 106:	ef 90       	pop	r14
 108:	df 90       	pop	r13
 10a:	cf 90       	pop	r12
 10c:	08 95       	ret

0000010e <collision_control_update_buzzer>:

void collision_control_update_buzzer(void) {
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
	static uint32_t last_buzzer_toggle_time = 0;
	uint32_t current_time = timer_get_milliseconds();
 11a:	0e 94 3b 01 	call	0x276	; 0x276 <timer_get_milliseconds>
 11e:	6b 01       	movw	r12, r22
 120:	7c 01       	movw	r14, r24
	
	if (g_system_status.buzzer_period > 0) {
 122:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 126:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 12a:	89 2b       	or	r24, r25
 12c:	19 f1       	breq	.+70     	; 0x174 <collision_control_update_buzzer+0x66>
		// Toggle buzzer based on calculated period (50% duty cycle)
		if (current_time - last_buzzer_toggle_time >= g_system_status.buzzer_period) {
 12e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 132:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 136:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <__data_end>
 13a:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <__data_end+0x1>
 13e:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <__data_end+0x2>
 142:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <__data_end+0x3>
 146:	97 01       	movw	r18, r14
 148:	86 01       	movw	r16, r12
 14a:	04 1b       	sub	r16, r20
 14c:	15 0b       	sbc	r17, r21
 14e:	26 0b       	sbc	r18, r22
 150:	37 0b       	sbc	r19, r23
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	08 17       	cp	r16, r24
 158:	19 07       	cpc	r17, r25
 15a:	2a 07       	cpc	r18, r26
 15c:	3b 07       	cpc	r19, r27
 15e:	50 f0       	brcs	.+20     	; 0x174 <collision_control_update_buzzer+0x66>
			buzzer_toggle();
 160:	0e 94 00 01 	call	0x200	; 0x200 <buzzer_toggle>
			last_buzzer_toggle_time = current_time;
 164:	c0 92 6a 00 	sts	0x006A, r12	; 0x80006a <__data_end>
 168:	d0 92 6b 00 	sts	0x006B, r13	; 0x80006b <__data_end+0x1>
 16c:	e0 92 6c 00 	sts	0x006C, r14	; 0x80006c <__data_end+0x2>
 170:	f0 92 6d 00 	sts	0x006D, r15	; 0x80006d <__data_end+0x3>
		}
	}
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	08 95       	ret

00000182 <collision_control_handle_warning_distance>:
	}
}

void collision_control_handle_warning_distance(void) {
	// Calculate buzzer period based on distance
	g_system_status.buzzer_period = BUZZER_TIME_MULTIPLIER * g_system_status.distance;
 182:	e0 e6       	ldi	r30, 0x60	; 96
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	9c 01       	movw	r18, r24
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	82 0f       	add	r24, r18
 19e:	93 1f       	adc	r25, r19
 1a0:	90 87       	std	Z+8, r25	; 0x08
 1a2:	87 83       	std	Z+7, r24	; 0x07
	
	// Update LED and buzzer states
	collision_control_update_led();
 1a4:	0e 94 5b 00 	call	0xb6	; 0xb6 <collision_control_update_led>
	collision_control_update_buzzer();
 1a8:	0e 94 87 00 	call	0x10e	; 0x10e <collision_control_update_buzzer>
 1ac:	08 95       	ret

000001ae <collision_control_process>:
	g_system_status.buzzer_counter = 0;
	g_system_status.buzzer_period = 0;
}

void collision_control_process(void) {
	if (g_system_status.distance <= DISTANCE_THRESHOLD) {
 1ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b2:	83 33       	cpi	r24, 0x33	; 51
 1b4:	18 f4       	brcc	.+6      	; 0x1bc <collision_control_process+0xe>
		collision_control_handle_warning_distance();
 1b6:	0e 94 c1 00 	call	0x182	; 0x182 <collision_control_handle_warning_distance>
 1ba:	08 95       	ret
		} else {
		collision_control_handle_safe_distance();
 1bc:	0e 94 52 00 	call	0xa4	; 0xa4 <collision_control_handle_safe_distance>
 1c0:	08 95       	ret

000001c2 <system_init>:
	.buzzer_period = 0
};

void system_init(void) {

	g_system_status.distance = 20;
 1c2:	e0 e6       	ldi	r30, 0x60	; 96
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	84 e1       	ldi	r24, 0x14	; 20
 1c8:	80 83       	st	Z, r24
	g_system_status.led_state = false;
 1ca:	11 82       	std	Z+1, r1	; 0x01
	g_system_status.buzzer_state = false;
 1cc:	12 82       	std	Z+2, r1	; 0x02
	g_system_status.led_counter = 0;
 1ce:	14 82       	std	Z+4, r1	; 0x04
 1d0:	13 82       	std	Z+3, r1	; 0x03
	g_system_status.buzzer_counter = 0;
 1d2:	16 82       	std	Z+6, r1	; 0x06
 1d4:	15 82       	std	Z+5, r1	; 0x05
	g_system_status.buzzer_period = 0;
 1d6:	10 86       	std	Z+8, r1	; 0x08
 1d8:	17 82       	std	Z+7, r1	; 0x07
 1da:	08 95       	ret

000001dc <led_off>:
	g_system_status.led_state = !g_system_status.led_state;
}

void buzzer_on(void) {
	BUZZER_PORT |= (1 << BUZZER_PIN);
	g_system_status.buzzer_state = true;
 1dc:	c0 98       	cbi	0x18, 0	; 24
 1de:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e2:	08 95       	ret

000001e4 <led_toggle>:
 1e4:	98 b3       	in	r25, 0x18	; 24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	98 27       	eor	r25, r24
 1ea:	98 bb       	out	0x18, r25	; 24
 1ec:	e0 e6       	ldi	r30, 0x60	; 96
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
 1f2:	89 27       	eor	r24, r25
 1f4:	81 83       	std	Z+1, r24	; 0x01
 1f6:	08 95       	ret

000001f8 <buzzer_off>:
}

void buzzer_off(void) {
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
 1f8:	c1 98       	cbi	0x18, 1	; 24
	g_system_status.buzzer_state = false;
 1fa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1fe:	08 95       	ret

00000200 <buzzer_toggle>:
}

void buzzer_toggle(void) {
	BUZZER_PORT ^= (1 << BUZZER_PIN);
 200:	98 b3       	in	r25, 0x18	; 24
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	89 27       	eor	r24, r25
 206:	88 bb       	out	0x18, r24	; 24
	g_system_status.buzzer_state = !g_system_status.buzzer_state;
 208:	e0 e6       	ldi	r30, 0x60	; 96
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	92 81       	ldd	r25, Z+2	; 0x02
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	89 27       	eor	r24, r25
 212:	82 83       	std	Z+2, r24	; 0x02
 214:	08 95       	ret

00000216 <all_outputs_off>:
}

void all_outputs_off(void) {
	led_off();
 216:	0e 94 ee 00 	call	0x1dc	; 0x1dc <led_off>
	buzzer_off();
 21a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <buzzer_off>
 21e:	08 95       	ret

00000220 <gpio_init>:
#include "gpio.h"

void gpio_init(void) {
	// Set LED and buzzer pins as output
	LED_DDR |= (1 << LED_PIN);
 220:	b8 9a       	sbi	0x17, 0	; 23
	BUZZER_DDR |= (1 << BUZZER_PIN);
 222:	b9 9a       	sbi	0x17, 1	; 23
	
	// Initially turn off all outputs
	all_outputs_off();
 224:	0e 94 0b 01 	call	0x216	; 0x216 <all_outputs_off>
 228:	08 95       	ret

0000022a <main>:
#include "timer.h"
#include "collision_control.h"

int main(void) {
	// Initialize all system modules
	system_init();
 22a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <system_init>
	uart_init();
 22e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <uart_init>
	gpio_init();
 232:	0e 94 10 01 	call	0x220	; 0x220 <gpio_init>
	timer_init();
 236:	0e 94 29 01 	call	0x252	; 0x252 <timer_init>
	collision_control_init();
 23a:	0e 94 49 00 	call	0x92	; 0x92 <collision_control_init>
	
	// Enable global interrupts
	sei();
 23e:	78 94       	sei
	
	// Main application loop
	while (1) {
		// Process collision avoidance logic
		collision_control_process();
 240:	0e 94 d7 00 	call	0x1ae	; 0x1ae <collision_control_process>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	83 ec       	ldi	r24, 0xC3	; 195
 246:	99 e0       	ldi	r25, 0x09	; 9
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <main+0x1e>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x24>
 24e:	00 00       	nop
 250:	f7 cf       	rjmp	.-18     	; 0x240 <main+0x16>

00000252 <timer_init>:

	TIMSK |= (1 << OCIE1A);
}

void timer_stop(void) {
	TIMSK &= ~(1 << OCIE1A);
 252:	8b e0       	ldi	r24, 0x0B	; 11
 254:	8e bd       	out	0x2e, r24	; 46
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	9f ef       	ldi	r25, 0xFF	; 255
 25a:	9b bd       	out	0x2b, r25	; 43
 25c:	8a bd       	out	0x2a, r24	; 42
 25e:	89 b7       	in	r24, 0x39	; 57
 260:	80 61       	ori	r24, 0x10	; 16
 262:	89 bf       	out	0x39, r24	; 57
 264:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <millisecond_counter>
 268:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <millisecond_counter+0x1>
 26c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <millisecond_counter+0x2>
 270:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <millisecond_counter+0x3>
 274:	08 95       	ret

00000276 <timer_get_milliseconds>:
}

uint32_t timer_get_milliseconds(void) {
	return millisecond_counter;
 276:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <millisecond_counter>
 27a:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <millisecond_counter+0x1>
 27e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <millisecond_counter+0x2>
 282:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <millisecond_counter+0x3>
}
 286:	08 95       	ret

00000288 <timer_interrupt_handler>:

void timer_interrupt_handler(void) {
	millisecond_counter++;
 288:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <millisecond_counter>
 28c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <millisecond_counter+0x1>
 290:	a0 91 74 00 	lds	r26, 0x0074	; 0x800074 <millisecond_counter+0x2>
 294:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <millisecond_counter+0x3>
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	a1 1d       	adc	r26, r1
 29c:	b1 1d       	adc	r27, r1
 29e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <millisecond_counter>
 2a2:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <millisecond_counter+0x1>
 2a6:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <millisecond_counter+0x2>
 2aa:	b0 93 75 00 	sts	0x0075, r27	; 0x800075 <millisecond_counter+0x3>
 2ae:	08 95       	ret

000002b0 <__vector_7>:
}


ISR(TIMER1_COMPA_vect) {
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	4f 93       	push	r20
 2c0:	5f 93       	push	r21
 2c2:	6f 93       	push	r22
 2c4:	7f 93       	push	r23
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
 2cc:	bf 93       	push	r27
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
	timer_interrupt_handler();
 2d2:	0e 94 44 01 	call	0x288	; 0x288 <timer_interrupt_handler>
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <uart_init>:
	return UDR;
}

bool uart_data_available(void) {
	return (UCSRA & (1 << RXC)) != 0;
}
 2f8:	10 bc       	out	0x20, r1	; 32
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	89 b9       	out	0x09, r24	; 9
 2fe:	80 e9       	ldi	r24, 0x90	; 144
 300:	8a b9       	out	0x0a, r24	; 10
 302:	86 e8       	ldi	r24, 0x86	; 134
 304:	80 bd       	out	0x20, r24	; 32
 306:	08 95       	ret

00000308 <uart_rx_interrupt_handler>:

void uart_rx_interrupt_handler(void) {

	g_system_status.distance = UDR;
 308:	8c b1       	in	r24, 0x0c	; 12
 30a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 30e:	08 95       	ret

00000310 <__vector_13>:
}


ISR(USART_RXC_vect) {
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
	uart_rx_interrupt_handler();
 332:	0e 94 84 01 	call	0x308	; 0x308 <uart_rx_interrupt_handler>
}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	7f 91       	pop	r23
 344:	6f 91       	pop	r22
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
